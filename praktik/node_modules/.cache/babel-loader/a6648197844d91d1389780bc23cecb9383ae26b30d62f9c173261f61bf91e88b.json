{"ast":null,"code":"var _jsxFileName = \"/Users/minnahedell/Documents/GitHub/Accessibility-Shop/praktik/src/components/CartContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport ShoppingCart from './ShoppingCart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nconst CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const addToCart = item => {\n    // Check if an item with the same id already exists in the cart\n    const isItemInCart = cartItems.some(cartItem => cartItem.id === item.id);\n    if (!isItemInCart) {\n      // If the item is not in the cart, add it\n      setCartItems(prevItems => [...prevItems, item]);\n    } else {\n      // If the item is already in the cart, you can handle it as needed\n      console.log(`Item with id ${item.id} is already in the cart`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      setCartItems,\n      addToCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(CartProvider, \"jeyeRm/hZ/3zvXF4PAYTLSHDNRs=\");\n_c = CartProvider;\nexport { CartProvider, CartContext };\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","ShoppingCart","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","addToCart","item","isItemInCart","some","cartItem","id","prevItems","console","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/minnahedell/Documents/GitHub/Accessibility-Shop/praktik/src/components/CartContext.jsx"],"sourcesContent":["import React, { createContext, useState } from 'react';\nimport ShoppingCart from './ShoppingCart';\nconst CartContext = createContext();\n\nconst CartProvider = ({ children }) => {\n    const [cartItems, setCartItems] = useState([]);\n\n    const addToCart = (item) => {\n\n\n            // Check if an item with the same id already exists in the cart\n            const isItemInCart = cartItems.some(cartItem => cartItem.id === item.id);\n        \n            if (!isItemInCart) {\n                // If the item is not in the cart, add it\n                setCartItems((prevItems) => [...prevItems, item]);\n            } else {\n                // If the item is already in the cart, you can handle it as needed\n                console.log(`Item with id ${item.id} is already in the cart`);\n            }\n        \n        \n    };\n\n    return (\n        <CartContext.Provider value={{ cartItems, setCartItems, addToCart }}>\n            {children}\n        </CartContext.Provider>\n    );\n};\n\nexport { CartProvider, CartContext };"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1C,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMU,SAAS,GAAIC,IAAI,IAAK;IAGpB;IACA,MAAMC,YAAY,GAAGJ,SAAS,CAACK,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,EAAE,KAAKJ,IAAI,CAACI,EAAE,CAAC;IAExE,IAAI,CAACH,YAAY,EAAE;MACf;MACAH,YAAY,CAAEO,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEL,IAAI,CAAC,CAAC;IACrD,CAAC,MAAM;MACH;MACAM,OAAO,CAACC,GAAG,CAAE,gBAAeP,IAAI,CAACI,EAAG,yBAAwB,CAAC;IACjE;EAGR,CAAC;EAED,oBACIZ,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEZ,SAAS;MAAEC,YAAY;MAAEC;IAAU,CAAE;IAAAJ,QAAA,EAC/DA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACjB,EAAA,CAzBIF,YAAY;AAAAoB,EAAA,GAAZpB,YAAY;AA2BlB,SAASA,YAAY,EAAED,WAAW;AAAG,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}